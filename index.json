// This sample demonstrates handling intents from an Alexa skill using the Alexa Skills Kit SDK (v2).
// Please visit https://alexa.design/cookbook for additional examples on implementing slots, dialog management,
// session persistence, api calls, and more.
const Alexa = require('ask-sdk-core');

const LaunchRequestHandler = {
    canHandle(handlerInput) {
        return handlerInput.requestEnvelope.request.type === 'LaunchRequest';
    },
    handle(handlerInput) {
        const speechText = 'Welcome to meet andrew yang, where you can find out his positions on a wide variety of topics. You can start requesting by requesting a specific policy, by asking a specific question or say start from the beginning.';
        return handlerInput.responseBuilder
            .speak(speechText)
            .reprompt(speechText)
            .getResponse();
    }
};
const IntroductionIntentHandler = {
    canHandle(handlerInput) {
        return handlerInput.requestEnvelope.request.type === 'IntentRequest'
            && handlerInput.requestEnvelope.request.intent.name === 'IntroductionIntent';
    },
    handle(handlerInput) {
        const speechText = 'Introducing, the one and only, Andrew Yang...'; //what we'll have Alexa Say
        return handlerInput.responseBuilder
            .speak(speechText)
            .reprompt(speechText)//.reprompt('add a reprompt if you want to keep the session open for the user to respond')
            .getResponse();
    }
};
const UnniversalBasicIncomeIntentHandler = {
    canHandle(handlerInput) {
        return handlerInput.requestEnvelope.request.type === 'IntentRequest'
            && handlerInput.requestEnvelope.request.intent.name === 'UnniversalBasicIncomeIntent';
    },
    handle(handlerInput) {
        const speechText = 'https://www.yang2020.com/what-is-ubi/...'; //what we'll have Alexa Say
        return handlerInput.responseBuilder
            .speak(speechText)
            .reprompt(speechText)//.reprompt('add a reprompt if you want to keep the session open for the user to respond')
            .getResponse();
    }
};
const PolicyListIntentHandler = {
    canHandle(handlerInput) {
        return handlerInput.requestEnvelope.request.type === 'IntentRequest'
            && handlerInput.requestEnvelope.request.intent.name === 'PolicyListIntent';
    },
    handle(handlerInput) {
        const speechText = 'https://www.yang2020.com/policies/...'; //what we'll have Alexa Say
        return handlerInput.responseBuilder
            .speak(speechText)
            .reprompt(speechText)//.reprompt('add a reprompt if you want to keep the session open for the user to respond')
            .getResponse();
    }
};
//The rest of the intenthandlers copied and pasted below this and above the Amazon mandatory intents
const HelpIntentHandler = {
    canHandle(handlerInput) {
        return handlerInput.requestEnvelope.request.type === 'IntentRequest'
            && handlerInput.requestEnvelope.request.intent.name === 'AMAZON.HelpIntent';
    },
    handle(handlerInput) {
        const speechText = 'You can say hello to me! How can I help?'; 

        return handlerInput.responseBuilder
            .speak(speechText)
            .reprompt(speechText)
            .getResponse();
    }
};
const CancelAndStopIntentHandler = {
    canHandle(handlerInput) {
        return handlerInput.requestEnvelope.request.type === 'IntentRequest'
            && (handlerInput.requestEnvelope.request.intent.name === 'AMAZON.CancelIntent'
                || handlerInput.requestEnvelope.request.intent.name === 'AMAZON.StopIntent');
    },
    handle(handlerInput) {
        const speechText = 'Goodbye!';
        return handlerInput.responseBuilder
            .speak(speechText)
            .getResponse();
    }
};
const SessionEndedRequestHandler = {
    canHandle(handlerInput) {
        return handlerInput.requestEnvelope.request.type === 'SessionEndedRequest';
    },
    handle(handlerInput) {
        // Any cleanup logic goes here.
        return handlerInput.responseBuilder.getResponse();
    }
};

// The intent reflector is used for interaction model testing and debugging.
// It will simply repeat the intent the user said. You can create custom handlers
// for your intents by defining them above, then also adding them to the request
// handler chain below.
const IntentReflectorHandler = {
    canHandle(handlerInput) {
        return handlerInput.requestEnvelope.request.type === 'IntentRequest';
    },
    handle(handlerInput) {
        const intentName = handlerInput.requestEnvelope.request.intent.name;
        const speechText = `You just triggered ${intentName}`;

        return handlerInput.responseBuilder
            .speak(speechText)
            //.reprompt('add a reprompt if you want to keep the session open for the user to respond')
            .getResponse();
    }
};

// Generic error handling to capture any syntax or routing errors. If you receive an error
// stating the request handler chain is not found, you have not implemented a handler for
// the intent being invoked or included it in the skill builder below.
const ErrorHandler = {
    canHandle() {
        return true;
    },
    handle(handlerInput, error) {
        console.log(`~~~~ Error handled: ${error.message}`);
        const speechText = `Sorry, I couldn't understand what you said. Please try again.`;

        return handlerInput.responseBuilder
            .speak(speechText)
            .reprompt(speechText)
            .getResponse();
    }
};

// This handler acts as the entry point for your skill, routing all request and response
// payloads to the handlers above. Make sure any new handlers or interceptors you've
// defined are included below. The order matters - they're processed top to bottom.
exports.handler = Alexa.SkillBuilders.custom()
    .addRequestHandlers(
        LaunchRequestHandler,
        UnniversalBasicIncomeIntentHandler,
        PolicyListIntentHandler,
        YangBackgroundIntentHandler,
        MedicareintentHandler,
        HumanCenteredCapitalismIntentHandler,
        LocalBiddingWarsIntentHandler,
        PreservationOfLandIntentHandler,
        SmallBusinessPaymentsIntentHandler,
        PrivateDataRightsIntentHandler,
        ReduceWildFiresIntentHandler,
        PrescriptionDrugCostIntentHandler,
        VotingRightsRegistrationIntentHandler,
        CryptoAssestRegulationIntentHandler,
        ProportionalElectorsIntentHandler,
        ExpandSelectiveToolsIntentHandler,
        AutomaticVoterRegristraionIntentHandler,
        GridModernizationIntentHandler,
        HeadCultureCeremonyIntentHandler,
        WashingtonDCStateIntentHandler,
        GerrymanderingIntentHandler,
        ReducePackageWasteIntentHandler,
        PublicCouncilAdvisorsIntentHandler,
        QuantumComputingEncryptionIntentHandler,
        NoPenniesIntentHandler,
        ElectionDayHolidayIntentHandler,
        MMAFighterIntentHandler,
        SupremeCourtJusticeTermIntentHandler,
        OfficeTechnologyAssessmentIntentHandler,
        LowerVotingAgeIntentHandler,
        DecreaseCashBailIntentHandler,
        YearLongDaylightSavingsTimeIntentHandler,
        FederalAgencyRelocationIntentHandler,
        DemocracyDollarsIntentHandler,
        RankedChoiceVotingIntentHandler,
        DecriminalizeOpiodsIntentHandler,
        FreedomDividendIntentHandler,
        ClimateChangeIntentHandler,
        ReduceMassIncarcerationIntentHandler,
        OpiodCrisesIntentHandler,
        LGBTQRightsIntentHandler,
        ForeignPolicyFirstIntentHandler,
        GunSafetyIntentHandler,
        PaidFamilyLeaveIntentHandler,
        SupportArtsIntentHandler,
        ControlHigherEducationIntentHandler,
        PathwayCitizenshipImmigrationIntentHandler,
        SouthernBorderSecurityIntentHandler,
        DREAMActIntentHandler,
        ProChoiceIntentHandler,
        CampaignFinanceReformIntentHandler,
        EqualPayIntentHandler,
        VocationalEducationIntentHandler,
        CarbonFeeDividendIntentHandler,
        TeacherSalaryIncreaseIntentHandler,
        EarlyChildhoodEducationIntentHandler,
        LegalizeMarijuanaIntentHandler,
        PuertoRicoStateIntentHandler,
        ValueAddedTaxIntentHandler,
        BigPharmaAccountabilityIntentHandler,
        MentalHealthInvestmentIntentHandler,
        AmericanJournalismFellowsIntentHandler,
        SmartphoneReductionHarmIntentHandler,
        CopCameraIntentHandler,
        NCAAAthletePayIntentHandler,
        NuclearLaunchDecisionIntentHandler,
        FederalWorkforceBureaucracyIntentHandler,
        LocalJournalismFundIntentHandler,
        PostOfficeServiceIntentHandler,
        ExchangeProgramIntentHandler,
        FederalRegulatorsIntentHandler,
        WhiteHouseStaffMentalHealthIntentHandler,
        FreeMarriageCounselingIntentHandler,
        SunsetOldLawsIntentHandler,
        ProsperityGrantsIntentHandler,
        AirlinesCustomerIntentionHandler,
        AmericanScoreCardIntentHandler,
        SingleParentAssistanceIntentHandler,
        MedicalTechnologyInnovationIntentHandler,
        AutismFundingIntentHandler,
        RebuildAmericanInfrastructureIntentHandler,
        ReduceStudentLoanIntentHandler,
        MedicalExpertsAccessIntentHandler,
        MedicareForAllIntentHandler,
        RetirementSavingIntentHandler,
        EarmarkRevivalIntentHandler,
        FreeFinancialCounselingIntentHandler,
        AffordableCommunityCollegeIntentHandler,
        HighSchoolLifeSkillsIntentHandler,
        MilitarySpendingModernizationIntentHandler,
        WorkRelocationIntentHandler,
        PaidLeavePolicyIntentHandler,
        SelfDrivingVehicleTransitionIntentHandler,
        CapitalGainCarriedInterestIntentHandler,
        FileIncomeTaxIntentHandler,
        FinancialTransactionTaxIntentHandler,
        TortReformIntentHandler,
        AmericanMallActIntentHandler,
        HighSkillIndividualEnticeIntentHandler,
        ZoningIntentHandler,
        AlgorithmicTradingFraudIntentHandler,
        NuclearEnergyIntentHandler,
        ModernizeVotingIntentHandler,
        ModernTimeBankingIntentHandler,
        EconomicCrimeIntentHandler,
        MediaFragmentationIntentHandler,
        MakingTaxesFunIntentHandler,
        NetNeutralityIntentHandler,
        RegulateArtificialIntelligenceIntentHandler,
        RoboCallingIntentHandler,
        HelpIntentHandler,
        CancelAndStopIntentHandler,
        SessionEndedRequestHandler,
        IntentReflectorHandler) // make sure IntentReflectorHandler is last so it doesn't override your custom intent handlers
    .addErrorHandlers(
        ErrorHandler)
    .lambda();
